// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: juror.sql

package repository

import (
	"context"
)

const createJuror = `-- name: CreateJuror :one
INSERT INTO juror (slug, name)
VALUES (?, ?) RETURNING id
`

type CreateJurorParams struct {
	Slug string
	Name string
}

func (q *Queries) CreateJuror(ctx context.Context, arg CreateJurorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createJuror, arg.Slug, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const setJurorCategories = `-- name: SetJurorCategories :exec
INSERT INTO juror_categories (juror_id, category_id)
VALUES (?, ?)
ON CONFLICT (juror_id, category_id) DO NOTHING
`

type SetJurorCategoriesParams struct {
	JurorID    int64
	CategoryID int64
}

func (q *Queries) SetJurorCategories(ctx context.Context, arg SetJurorCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, setJurorCategories, arg.JurorID, arg.CategoryID)
	return err
}
